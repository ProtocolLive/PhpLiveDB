<html>

<head>
  <link rel="stylesheet" href="global.css">
  <meta property="og:locale" content="en-us">
  <meta property="og:site_name" content="PhpLiveDb Docs">
  <meta property="og:title" content="PhpLiveDb Docs">
  <meta property="og:description" content="PhpLiveDb library Documentation">
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://protocollive.github.io/PhpLiveDB">
  <meta property="og:image" content="https://opengraph.githubassets.com/31f593b768176dcc3fd800bfbfa6b9d47b7ea0aca35cc40d438893fe35776f3e/ProtocolLive/PhpLiveDB">
  <meta property="og:image:width" content="864">
  <meta property="og:image:height" content="432">
  <title>PhpLivePdo::Run</title>
</head>

<body>
  <table style="width:95%; margin-left: auto;margin-right: auto;">
    <tr>
      <td style="width:100%; background-color: #F2F2F2; padding: 20px;">
        <div class="maintitle">PhpLivePdo::Run</div>
        <p>Send a query to run in database</p>
        <p>&nbsp;</p>

        <div class="title">Sintaxe</div>
        <br>
        <div class="code">
          <span class="const">public</span> <span class="func">PhpLivePdo::Run</span> (
          <span class="type">string</span> <span class="var">$Query</span> [,
          <span class="type">array</span> <span class="var">$Params</span> = <span class="func">array</span>() [,
          <span class="type">array</span> <span class="var">$Options</span> = <span class="func">array</span>()
          ] ] ) : <span class="type">mixed</span>;
        </div>
        <p>&nbsp;</p>

        <div class="title">Parameters</div>
        <p><strong class="var">$Query</strong></p>
        <p>The query to be executed</p>
        <p><strong class="var">$Params</strong></p>
        <p>A array with the tokens to be replaced:</p>
        <div class="code">
          [TokenName, TokenData, TokenType]
        </div>
        <p>TokenName (<span class="type">int</span> or <span class="type">string</span>) - A number or a string starting
          with ":";</p>
        <p>TokenData (<span class="type">int</span> or <span class="type">string</span>) - The value to be replaced;</p>
        <p>
          TokenType (<span class="type">int</span>) The constants of <span class="func">PhpLivePdo</span> (<span class="const">PdoInt</span>, <span class="const">PdoStr</span>, <span class="const">PdoNull</span>, <span class="const">PdoSql</span>) or the <a href="https://www.php.net/manual/us/pdo.constants.php" target="_blank">constants of PDO</a>;
        </p>
        <a name="Options"></a>
        <p><strong><a id="Options" class="var">$Options</a>:</strong></p>
        <p>
          Safe (<span class="type">bool</span>)(Optional - Default: <span class="const">true</span>) - Dont run query update or delete without where condition or the query truncate;
        </p>
        <p>
          Debug (<span class="type">bool</span>)(Optional - Default: <span class="const">false</span>) - Dump the query after parsed;
        </p>
        <p>Log (<span class="type">int</span>)(Optional) - The log description of the event;</p>
        <p>User (<span class="type">int</span>)(Optional - Mandatory with Log) - The user running the query;</p>
        <p>Target (<span class="type">int</span>)(Optional - Optional with Log) - The user afected by the query;</p>
        <p>&nbsp;</p>

        <div class="title">The special type <span class="const">PdoSql</span></div>
        <p>
          This special type not make sense with command <span class="func">PhpLivePdo::Run</span>. See the command <a
            href="insert.htm#PdoSql" class="func">PhpLivePdo::Insert</a>
        </p>
        <p>&nbsp;</p>

        <div class="title">Notes about type <span class="const">PdoInt</span></div>
        <p>
          - The <span class="func">PhpLivePdo</span> automatically changes the decimal comma to point, for numbers used in regions such as in Brazil.<br>
          For this reason, do not use points to separate the thousands.
        </p>
        <p>
          Examples:<br>
          3,14 (Brazil notation) -> 3.14 -> OK<br>
          3.14 (US notation) -> 3.14 -> OK<br>
          1.234,56 (Brazil notation) -> 1.234.56 -> Error<br>
          1,234.56 (US notation) -> 1.234.56 -> Error
        </p>
        <p>
          - The <span class="func">PhpLivePdo</span> automaticaly changes the <span class="const">PdoInt</span> with decimals to <span class="const">PdoStr</span> because of a limitation of PDO.
        </p>
        <p>&nbsp;</p>

        <div class="title">Return Values</div>
        <p>
          Return an integer in case of insert, update and delete, an array in case of select, or <span class="const">false</span> in case of error;
        </p>
        <p><strong>Example of select return:</strong></p>
        <div class="code">
          [
          <p class="ident">
            0 => [
          </p>
          <p class="ident">
            <span class="ident">0 => 1,</span>
          </p>
          <p class="ident">
            <span class="ident">'user_id' => 1,</span>
          </p>
          <p class="ident">
            <span class="ident">1 => 'admin',</span>
          </p>
          <p class="ident">
            <span class="ident">'name' => 'admin',</span>
          </p>
          <p class="ident">
            <span class="ident">2 => '123',</span>
          </p>
          <p class="ident">
            <span class="ident">'pwd' => '123',</span>
          </p>
          <p class="ident">
            ]
          </p>
          <p class="ident">
            1 => [
          </p>
          <p class="ident">
            <span class="ident">0 => 2,</span>
          </p>
          <p class="ident">
            <span class="ident">'user_id' => 2,</span>
          </p>
          <p class="ident">
            <span class="ident">1 => 'John',</span>
          </p>
          <p class="ident">
            <span class="ident">'name' => 'John',</span>
          </p>
          <p class="ident">
            <span class="ident">2 => '456',</span>
          </p>
          <p class="ident">
            <span class="ident">'pwd' => '456',</span>
          </p>
          <p class="ident">
            ]
          </p>
          ]
        </div>
        <p>&nbsp;</p>

        <div class="title">
          <strong>Errors</strong>
        </div>
        <p>
          If an error happens, a log file is created in the same directory of the library.<br>
          If the PHP ini configuration display_errors are defined as <span class="const">true</span>, the error are dumped in the screen, with the <a href="https://www.php.net/manual/en/function.debug-backtrace" target="_blank" class="func">debug_backtrace</a>.<br>
          Also you can get the code and description with the function <a href="errorget.htm" class="func">PhpLivePdo::ErrorGet</a>.
        </p>
        <p>&nbsp;</p>

        <div class="title">Examples</div>
        <br>

        <p><strong></strong>A simple query:</strong></p>
        <div class="code">
          <span class="var">$result</span> = <span class="func">$PDO->Run</span>("
          <p class="string ident">
            select *<br>
            from users
          </p>
          ");
        </div>

        <p><strong>A query with ordened tokens:</strong></p>
        <div class="code">
          <span class="var">$result</span> = <span class="func">$PDO->Run</span>("
          <p class="string ident">
            select *</span><br>
            from users<br>
            where email=?<br>
            <span class="ident">and city=?</span>
          </p>", [<br>
          <p class="ident">
            [<span class="const">1</span>, <span class="var">$_POST[<span class="string">'email'</span>]</span>, <span class="const">PdoStr</span>],
          </p>
          <p class="ident">
            [<span class="const">2</span>, <span class="var">$_POST[<span class="string">'city'</span>]</span>, <span class="const">PdoInt</span>]
          </p>
          ]);
        </div>

        <p><strong>A query with named tokens:</strong></p>
        <div class="code">
          <span class="var">$result</span> = <span class="func">$PDO->Run</span>("
          <p class="string ident">
            select *<br>
            from users<br>
            where name like :name<br>
            <span class="ident">or city like :name</span>
          </p>
          ",[
          <p class="ident">
            [<span class="string">':name'</span>, <span class="string">'%'</span> . <span class="var">$_POST[</span>
            <span class="string">'name'</span>] . <span class="string">'%'</span>,
            <span class="const">PdoStr</span>],
          </p>
          ]);
        </div>

        <p><strong>A simple query with table prefix:</strong></p>
        <div class="code">
          <span class="var">$result</span> = <span class="var">$PDO->Run</span>("
          <p class="string ident">
            select *<br>
            from ##users
          </p>
          ");<br>
          <span class="comment">// Execute the query: select * from sys_users</span>
        </div>
        <br>

        <p><strong>Getting the values returned:</strong></p>
        <div class="code">
          <span class="var">$result</span> = <span class="func">$PDO->Run</span>("
          <p class="string ident">
            select *<br>
            from ##users
          </p>
          ");<br>
          <span class="type">echo</span> <span class="string">'Welcome '</span> . <span class="var">$result</span>[
          <span class="const">0</span>][<span class="string">'name'</span>];
        </div>

        <p><strong>Getting the values returned:</strong></p>
        <div class="code">
          <span class="var">$result</span> = <span class="var">$PDO->Run</span>("
          <p class="string ident">
            select *<br>
            from ##users
          </p>
          ");<br>
          <span class="type">foreach</span>(<span class="var">$result</span> <span class="type">as</span>
          <span class="var">$line</span>):<br>
          <p class="ident">
            <span class="type">echo</span> <span class="var">$line</span>[<span class="string">'name'</span>] .
            <span class="string">"&lt;br>"</span>;
          </p>
          <span class="type">endforeach;</span>
        </div>

        <p><strong>Debugging a query:</strong></p>
        <div class="code">
          <span class="var">$result</span> = <span class="func">$PDO->Run</span>("
          <p class="string ident">
            select *<br>
            from users<br>
            where email=?<br>
            <span class="ident">and city=?</span>
          </p>
          ",[<br>
          <p class="ident">
            [<span class="const">1</span>, <span class="var">$_POST</span>[<span class="string">'email'</span>], <span class="const">PdoStr</span>],
          </p>
          <p class="ident">
            [<span class="const">2</span>, <span class="var">$_POST</span>[<span class="string">'city'</span>], <span class="const">PdoInt</span>]
          </p>
          ],[<br>
          <p class="ident">
            <span class="string">'Debug'</span> => <span class="const">true</span>
          </p>
          ]);
        </div>
        <p><strong>Dealing with nullable field:</strong></p>
        <div class="code">
          <span class="comment">//For PHP 7.4</span><br>
          <span class="var">$_GET</span>[<span class="string">'id'</span>] ??= '';<br>
          <br>
          <span class="comment">//For PHP 7.3</span><br>
          <span class="var">$_GET</span>[<span class="string">'id'</span>] = <span class="var">$_GET</span>[
          <span class="string">'id'</span>] ?? '';<br>
          <br>
          <span class="var">$result</span> = <span class="func">$PDO->Run</span>("
          <p class="string ident">
            select *<br>
            from users<br>
            where email=?<br>
            <span class="ident">and city=?</span>
          </p>
          ",[
          <p class="ident">
            [<span class="const">1</span>, <span class="var">$_GET</span>[<span class="string">'id'</span>], <span class="var">$_GET</span>[<span class="string">'id'</span>] === ''? <span class="const">PdoNull</span>:
            <span class="const">PdoInt</span>]
          </p>
          ]);
        </div>
        <p>&nbsp;</p>

      </td>
      <td style="color: #ccc; font-size: 18px; vertical-align: top;">
        <iframe src="menu.htm" class="menu2"></iframe>
      </td>
    </tr>
  </table>
</body>

</html>